function FreehandTool() {
  //set an icon and a name for the object
  this.icon = 'assets/freehand.jpg';
  this.name = 'freehand';

  //to smoothly draw we'll draw a line from the previous mouse location
  //to the current mouse location. The following values store
  //the locations from the last frame. They are -1 to start with because
  //we haven't started drawing yet.
  var previousMouseX = -1;
  var previousMouseY = -1;
  let width;
  var widthText;
  var added = false;
  this.drawHistory = new drawHistory();
  this.shouldSave = false;

  //draws the line to the screen

  this.addToolOptions = function() {
    if (added == false) {
      if (width == null) {
        width = 1;
      }

      widthSlider = createSlider(1, 10, width, 1);
      width = widthSlider.value();
      this.changeWidthText();
      added = true;
    }
  };

  this.changeWidthText = function() {
    if (widthText != null) {
      widthText.remove();
    }
    widthText = createDiv('<h4>Line Width : ' + width + ' <h4>');
    widthText.child(widthSlider);
    widthText.addClass('toolElement');
    var p = select('#toolOptions');
    widthText.parent(p);
  };

  this.removeToolOptions = function() {
    if (added == true) {
      var c = selectAll('.toolElement');
      for (var i = 0; i < c.length; i++) {
        c[i].remove();
      }
    }
    added = false;
    strokeWeight(1);
  };

  this.draw = function() {
    oldVal = width;
    width = widthSlider.value();
    if (width != oldVal) {
      this.changeWidthText();
    }
    strokeWeight(width);

    if (mouseIsPressed) {
      loadPixels();
	  circle = circleIndices(mouseX, mouseY, 2);
	//   console.log(mouseX, mouseY);
	  for (var i = 0; i <= circle.length; i++){
		  pixels[circle[i]] = 0; 
		  pixels[circle[i] + 1] = 0;
		  pixels[circle[i] + 2] = 0;
	  }
      updatePixels();
    }
  };
}
function circleIndices(x,y,r){
	indices = [];
	circle = circleBitMap(x,y,r);
	for (var i = 0; i < circle.length; i++){
		for(var j = circle[i][0]; j <= circle[i][1]; j++){
			indices.push( 4 * ( j + (circle[i][2] * width) ) );
			// indices.push( 4 * ( j + (circle[i][2] * width) ) );
		}
	}
	return indices
}

function circleBitMap(x,y,r){
	circle = circleMap(r);
	for (var i = 0; i < circle.length; i++){
		circle[i][0] += x;
		circle[i][1] += x;
		circle[i][2] += y;
	}
	return circle;
}

function circleMap(r){
	circle = [];
	for(var y = 0; y <=r; y++){
		var a = circleMinMax(r, y);
		circle.push([a * -1, a,y]);
		circle.push([a * -1, a,-y]);
	}
	return circle;
}

function circleMinMax(r, y){
	return Math.round(Math.sqrt(Math.pow(r,2) - Math.pow(y,2)));
}